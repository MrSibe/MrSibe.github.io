import{_ as i,c as a,a as t,o as n}from"./app-DMdwLNUM.js";const e={};function h(l,s){return n(),a("div",null,s[0]||(s[0]=[t(`<h2 id="lab-2-介绍" tabindex="-1"><a class="header-anchor" href="#lab-2-介绍"><span>Lab 2 介绍</span></a></h2><p>在这个实验中，你将学习如何在 IntelliJ 中使用调试器以及如何在 IntelliJ 中使用 JUnit 测试。</p><p>对于所有未来的作业，我们将导入一个名为 <code>pom.xml</code> 的文件，而不是像在 Lab 1 和 Proj 0 中那样导入整个文件夹。原因是 <code>pom.xml</code> 文件告诉 IntelliJ 在哪里找到 61 B 的库。也可以手动指定库的位置，但这个过程有点麻烦。</p><h2 id="debugger-basics" tabindex="-1"><a class="header-anchor" href="#debugger-basics"><span>Debugger Basics</span></a></h2><p>很多时候某些程序员会通过 print 函数来调试程序，很麻烦。因此我们需要学习科学的 debug 技巧。</p><ul><li><p><strong>Breakpoints</strong> 是断点，debugger 执行到此就会暂停。</p></li><li><p><strong>Step Into</strong> 是<strong>单步执行</strong>，或者说<strong>步入</strong>，其实就是执行下一条代码，在 IntelliJ 里面的快捷键是 F7。</p></li><li><p><strong>Step Over</strong> 是指<strong>单步跳过</strong>，简称<strong>步过</strong>，允许我们完成函数调用而不显示函数执行，快捷键是 F8。</p></li><li><p><strong>Step Out</strong> 是指<strong>单步退出</strong>，简称<strong>步出</strong>，可以让我们从函数中跳出来，回到函数调用语句，快捷键是 Shift+F8.</p></li></ul><h2 id="junit-and-unit-testing" tabindex="-1"><a class="header-anchor" href="#junit-and-unit-testing"><span>JUnit and Unit Testing</span></a></h2><p>接下来将利用 JUnit 进行<strong>单元测试</strong>。这是一种分治思想，把大的程序分成小的模块，对每一个模块进行测试，每个模块没问题，整个程序基本上就没啥问题。</p><p>写 JUnit 测试之前，首先导入以下包：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">junit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Assert</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">*</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">junit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后按照以下格式写测试函数：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Test</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> testMethod</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    assertEquals</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">expected</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">actual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@Test</code> 是注解，告诉编译器下面这段函数是 JUnit 测试函数。<code>assertEquals</code> 是JUnit测试中常用的方法。它测试变量的实际值是否与预期值相等。</p><p>所有测试必须是非静态的。这可能看起来很奇怪，因为你的测试不使用实例变量，并且你可能不会实例化这个类。然而，这是JUnit的设计者决定测试应该如何编写的方式，所以我们就这样做吧。</p><h2 id="核心任务" tabindex="-1"><a class="header-anchor" href="#核心任务"><span>核心任务</span></a></h2><p>这个 Lab 的任务主要是 Debug IntList。</p><p>我们创建了一个文件 <code>IntListExercises.java</code>，其中包含三个方法，每个方法都有错误。你在这一部分的任务是找到并修复这些错误！为了帮助你，我们添加了一些有用的起始代码和测试框架，下面我们将进行解释。</p><h3 id="函数介绍" tabindex="-1"><a class="header-anchor" href="#函数介绍"><span>函数介绍</span></a></h3><p>相对于课上的代码，增添了 <code>of</code> 方法和 <code>toString</code> 方法。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">IntList</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> lst</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> IntList</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">of</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lst</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// Output: 1 -&gt; 2 -&gt; 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="part-a-intlist-iteration" tabindex="-1"><a class="header-anchor" href="#part-a-intlist-iteration"><span>Part A: IntList Iteration</span></a></h3><p><code>addConstant</code>这个方法旨在接收一个<code>IntList</code>，并对列表中的每个元素进行可变的常量加法。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* Expected Behavior */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">IntList</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> lst</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> IntList</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">of</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">addConstant</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">lst</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lst</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// Output: 2 -&gt; 3 -&gt; 4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">addConstant</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">lst</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lst</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// Output: 6 -&gt; 7 -&gt; 8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仓库提供的 <code>addConstant</code> 有问题，需要修改。</p><h3 id="part-b-nested-helper-methods-and-refactoring-for-debugging" tabindex="-1"><a class="header-anchor" href="#part-b-nested-helper-methods-and-refactoring-for-debugging"><span>Part B: Nested Helper Methods and Refactoring for Debugging</span></a></h3><p>在这一部分中，我们将调试 <code>IntListExercises.java</code> 中的 <code>setToZeroIfMaxFEL</code> 方法。</p><p>此方法执行一个非常奇怪的任务。具体来说，如果（且仅当）从某个节点开始的 <code>IntList</code> 中的最大值的首位和末位数字相同，它会将 <code>IntList</code> 中该节点处的值替换为 0。</p><h3 id="part-c-tricky-intlists" tabindex="-1"><a class="header-anchor" href="#part-c-tricky-intlists"><span>Part C: Tricky IntLists!</span></a></h3><p>在这一部分中，我们将调试 <code>squarePrimes</code> 方法，该方法位于 <code>IntListExercises.java</code> 文件中。</p><p>这个方法旨在接收一个<code>IntList</code>，将其中的所有素数元素平方，并保持合数（非素数）元素不变。如果至少有一个元素被平方了，它将返回<code>true</code>，否则返回<code>false</code>。</p>`,30)]))}const k=i(e,[["render",h]]),r=JSON.parse('{"path":"/CS_61B/ikwn4wk2/","title":"Lab 2","lang":"zh-CN","frontmatter":{"title":"Lab 2","createTime":"2025/05/10 17:00:25","permalink":"/CS_61B/ikwn4wk2/","description":"Lab 2 介绍 在这个实验中，你将学习如何在 IntelliJ 中使用调试器以及如何在 IntelliJ 中使用 JUnit 测试。 对于所有未来的作业，我们将导入一个名为 pom.xml 的文件，而不是像在 Lab 1 和 Proj 0 中那样导入整个文件夹。原因是 pom.xml 文件告诉 IntelliJ 在哪里找到 61 B 的库。也可以手动...","head":[["meta",{"property":"og:url","content":"https://github.com/MrSibe/MrSibe.github.io/CS_61B/ikwn4wk2/"}],["meta",{"property":"og:site_name","content":"西贝的博客"}],["meta",{"property":"og:title","content":"Lab 2"}],["meta",{"property":"og:description","content":"Lab 2 介绍 在这个实验中，你将学习如何在 IntelliJ 中使用调试器以及如何在 IntelliJ 中使用 JUnit 测试。 对于所有未来的作业，我们将导入一个名为 pom.xml 的文件，而不是像在 Lab 1 和 Proj 0 中那样导入整个文件夹。原因是 pom.xml 文件告诉 IntelliJ 在哪里找到 61 B 的库。也可以手动..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-14T03:18:42.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-14T03:18:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Lab 2\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-14T03:18:42.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":2.99,"words":896},"git":{"updatedTime":1757819922000,"contributors":[{"name":"xibei","username":"xibei","email":"15281741661@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/xibei?v=4","url":"https://github.com/xibei"}]},"autoDesc":true,"filePathRelative":"notes/CS-61B/Lab 2.md"}');export{k as comp,r as data};
