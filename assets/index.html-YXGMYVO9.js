import{_ as a,c as n,a as e,o as i}from"./app-DMdwLNUM.js";const s={};function r(p,t){return i(),n("div",null,t[0]||(t[0]=[e('<h2 id="一、路由简介" tabindex="-1"><a class="header-anchor" href="#一、路由简介"><span>一、路由简介</span></a></h2><h3 id="域间路由与域内路由" tabindex="-1"><a class="header-anchor" href="#域间路由与域内路由"><span>域间路由与域内路由</span></a></h3><p>路由研究信息沿着什么样的路径传输的问题。</p><p>让世界上的每一个节点都遵循同一个路由协议是很困难的，但是互联网是一个局域网连接起来的网络，域内路由协议（或内部网关协议，IGPs）可能不同（例如OSPF，开放最短路径优先，和 IS-IS，中间系统到中间系统），但是域间路由协议（或外部网关协议，EGPs）只有一种： BGP（边界网关协议）。</p><p><img src="https://raw.githubusercontent.com/MrSibe/obsidian_images/main/{382995A9-37C8-4791-A0F3-F4B2507D24E7}.png" alt="{382995A9-37C8-4791-A0F3-F4B2507D24E7}.png"></p><h2 id="二、域内路由模型" tabindex="-1"><a class="header-anchor" href="#二、域内路由模型"><span>二、域内路由模型</span></a></h2><h3 id="全连接网络拓扑" tabindex="-1"><a class="header-anchor" href="#全连接网络拓扑"><span>全连接网络拓扑</span></a></h3><p>首先域内路由模型可以抽象为图，假设任意两个节点之间都有链路连接，这种网络就叫<strong>全连接网络拓扑</strong>。</p><p><img src="https://raw.githubusercontent.com/MrSibe/obsidian_images/main/{62046EDF-492F-43DF-9075-DC93168A6872}.png" alt="{62046EDF-492F-43DF-9075-DC93168A6872}.png"></p><p>这种网络的优点是带宽大大提高，适合小型网络；缺点显而易见，后面再增添一个节点，就需要连接更多链路，扩展性极差。</p><h3 id="单链路网络拓扑" tabindex="-1"><a class="header-anchor" href="#单链路网络拓扑"><span>单链路网络拓扑</span></a></h3><p>一条链路连接所有机器，称之为单链路网络拓扑，如图所示：</p><p><img src="https://raw.githubusercontent.com/MrSibe/obsidian_images/main/{EC50E1C6-1560-4DC4-8EA0-717E4166C7EB}.png" alt="{EC50E1C6-1560-4DC4-8EA0-717E4166C7EB}.png"></p><p>跟多链路相反，单链路带宽较小，但是扩展性很好。</p><h3 id="带路由器的网络拓扑" tabindex="-1"><a class="header-anchor" href="#带路由器的网络拓扑"><span>带路由器的网络拓扑</span></a></h3><p>路由器能够转发节点之间的消息：</p><p><img src="https://raw.githubusercontent.com/MrSibe/obsidian_images/main/{F6798983-F2B1-4D38-9678-EC03BFE7C226}.png" alt="{F6798983-F2B1-4D38-9678-EC03BFE7C226}.png"></p><p>这样不仅带宽大，扩展性好，而且增强了健壮性：一条链路坏了，还可以走其他链路。</p><h3 id="路由协议" tabindex="-1"><a class="header-anchor" href="#路由协议"><span>路由协议</span></a></h3><p>路由协议不考虑终端主机，只考虑路由器之间的传输；一个终端主机会把数据全部丢给路由器，这叫终端主机的默认路由。</p><p>路由协议的数据包报头包含了源地址和目的地址：</p><p><img src="https://raw.githubusercontent.com/MrSibe/obsidian_images/main/20250711115906.png" alt="image.png"></p><p>接下来需要解决几个问题：</p><ol><li>怎么给每个机器分配地址？</li><li>路由器拿到数据包，如何知道这个包应该往哪里发送？</li><li>互联网是不断变化的：可能突然出现新节点，可能某个节点失效。</li><li>链路可能会丢失数据包。</li></ol><h3 id="路由是分布式的" tabindex="-1"><a class="header-anchor" href="#路由是分布式的"><span>路由是分布式的</span></a></h3><p>针对第三个问题，我们很难去做一个单一的巨大的数据库去存放路由信息，解决问题的办法是利用分布式：每一个路由器解决一部分路由问题，大家共同去解决全局问题。</p><h2 id="三、路由状态" tabindex="-1"><a class="header-anchor" href="#三、路由状态"><span>三、路由状态</span></a></h2><h3 id="转发表" tabindex="-1"><a class="header-anchor" href="#转发表"><span>转发表</span></a></h3><p>前面讲过路由问题：路由器拿到数据包，如何知道这个包应该往哪里发送？</p><p>也许我们可以转发给随机一个邻居路由器，但是可能无法到达目的地；也许还可以转发给所有邻居路由器，但是很浪费资源。</p><p>现实中的解决方法是通过<strong>路由状态</strong>。</p><p>数据包将要被转发到的下一个中间路由器被称为下一跳。对于每个可能的最终目的地，我们可以写下对应的下一跳以将数据包转发到更接近该目的地的位置。这个结果被称为<strong>转发表</strong>。</p><p><img src="https://raw.githubusercontent.com/MrSibe/obsidian_images/main/{7E01DCEB-F2DC-4F70-A357-7C23373356D1}.png" alt="{7E01DCEB-F2DC-4F70-A357-7C23373356D1}.png"></p><p>现实中的转发表不是像图中的 R1、R2 这样，而是物理层面上的端口号。这里简化了方便讲解。</p><p>转发表的特征是：如果转发表不变，那么所有同样目的地的数据包必然会发送到同一个下一跳，我们称为基于目的地的转发。</p><h3 id="路由与转发" tabindex="-1"><a class="header-anchor" href="#路由与转发"><span>路由与转发</span></a></h3><p>路由是路由器之间相互通信以确定如何填充其转发表的过程；转发是指接收数据包，在表中查找合适的下一跳，并将数据包发送到合适的邻居的过程。</p><p><strong>转发是一个局部过程</strong>，当路由器转发数据包时，路由器不需要知道完整的网络拓扑；<strong>路由是一个全局过程</strong>，为了填写转发表，我们需要了解网络的全局拓扑结构。</p><h3 id="路由状态有效性" tabindex="-1"><a class="header-anchor" href="#路由状态有效性"><span>路由状态有效性</span></a></h3><p><strong>路由状态</strong>由每个路由器的转发表组成，一个路由状态是否有效，要看通过了这个路由状态转发出去的数据包是否能够达到目的地（这是一个全局上的评估）；<strong>全局路由状态</strong>则由所有路由器中的所有转发表集合组成。因此路由状态是全局的。</p><p><strong>全局路由状态是有效的，当且仅当对于任何目的地，数据包都不会被困在死胡同或循环中。</strong></p><ol><li>如果数据包到达路由器，但路由器不知道如何将数据包转发到其目的地，则数据包不会被转发，这种情况称为死胡同。</li><li>如果在节点循环中发送数据包，就会发生循环。</li><li>没有死胡同也没有循环是有效性的充分必要条件。</li></ol><p><img src="https://raw.githubusercontent.com/MrSibe/obsidian_images/main/{32D157E8-C015-4EBF-BB0C-EBFCD52D09CB}.png" alt="{32D157E8-C015-4EBF-BB0C-EBFCD52D09CB}.png"></p><p><img src="https://raw.githubusercontent.com/MrSibe/obsidian_images/main/{C33297EA-F22F-488C-976E-FFF26654B5D2}.png" alt="{C33297EA-F22F-488C-976E-FFF26654B5D2}.png"></p><p>总的来说，只有满足没有死胡同和循环，路由状态才是有效的。</p><h3 id="定向交付树" tabindex="-1"><a class="header-anchor" href="#定向交付树"><span>定向交付树</span></a></h3><p>我们可以提出这样的问题：给定一个全局路由状态，我们如何检查它是否有效？</p><p><img src="https://raw.githubusercontent.com/MrSibe/obsidian_images/main/{4E342780-38B0-488B-AD30-A212653ABCB4}.png" alt="{4E342780-38B0-488B-AD30-A212653ABCB4}.png"></p><p>在生成的图中，每个节点将只有一个出射箭头。即使一个节点有多个输入箭头（路径），由于只有一个输出箭头，这些路径现在会汇聚成一条路径，这样就能确保数据包能够到达目的地。这样的路径被称为 <strong>定向交付树</strong>。这是一个<strong>以目的地为根的</strong>有向生成树。</p><p><img src="https://raw.githubusercontent.com/MrSibe/obsidian_images/main/{0CAC141D-2DA9-45BE-9709-4B28692F34FE}.png" alt="{0CAC141D-2DA9-45BE-9709-4B28692F34FE}.png"></p><p>可以发现这样的树不会有死胡同或者循环，因此是有效的。</p><h3 id="最低成本路由" tabindex="-1"><a class="header-anchor" href="#最低成本路由"><span>最低成本路由</span></a></h3><p>我们现在可以设计一个有效的路由状态，接下来我们要提升效率。</p><p><strong>最短路径路由</strong>是一种常见的衡量路由是否良好的方法。在最短路径路由中，<strong>我们为每条链路分配一个数值成本，并寻找能够最小化成本的路由</strong>。换句话说，我们希望找到能让数据包沿着最低成本路径到达目的地的路由。（每条链路的成本取决于建设链路的费用、传播延迟、链路的物理距离等许多因素）</p><p>假设每条链路的成本一样都是 1，那么最短路径路由就会特化成<strong>最小化跳数</strong>。</p><h3 id="静态路由" tabindex="-1"><a class="header-anchor" href="#静态路由"><span>静态路由</span></a></h3><p>我们可以不用某种特定算法生成转发表，而是<strong>直接让网络管理员手动填充转发表。这种方式被称为静态路由</strong>。</p><p>未完待续...</p>',58)]))}const h=a(s,[["render",r]]),g=JSON.parse('{"path":"/CS-168/02-router/","title":"2. 路由","lang":"zh-CN","frontmatter":{"title":"2. 路由","createTime":"2025/07/11 15:03:30","permalink":"/CS-168/02-router/","description":"一、路由简介 域间路由与域内路由 路由研究信息沿着什么样的路径传输的问题。 让世界上的每一个节点都遵循同一个路由协议是很困难的，但是互联网是一个局域网连接起来的网络，域内路由协议（或内部网关协议，IGPs）可能不同（例如OSPF，开放最短路径优先，和 IS-IS，中间系统到中间系统），但是域间路由协议（或外部网关协议，EGPs）只有一种： BGP（边界...","head":[["meta",{"property":"og:url","content":"https://github.com/MrSibe/MrSibe.github.io/CS-168/02-router/"}],["meta",{"property":"og:site_name","content":"西贝的博客"}],["meta",{"property":"og:title","content":"2. 路由"}],["meta",{"property":"og:description","content":"一、路由简介 域间路由与域内路由 路由研究信息沿着什么样的路径传输的问题。 让世界上的每一个节点都遵循同一个路由协议是很困难的，但是互联网是一个局域网连接起来的网络，域内路由协议（或内部网关协议，IGPs）可能不同（例如OSPF，开放最短路径优先，和 IS-IS，中间系统到中间系统），但是域间路由协议（或外部网关协议，EGPs）只有一种： BGP（边界..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/MrSibe/obsidian_images/main/%7B382995A9-37C8-4791-A0F3-F4B2507D24E7%7D.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-14T03:18:42.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-14T03:18:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2. 路由\\",\\"image\\":[\\"https://raw.githubusercontent.com/MrSibe/obsidian_images/main/%7B382995A9-37C8-4791-A0F3-F4B2507D24E7%7D.png\\",\\"https://raw.githubusercontent.com/MrSibe/obsidian_images/main/%7B62046EDF-492F-43DF-9075-DC93168A6872%7D.png\\",\\"https://raw.githubusercontent.com/MrSibe/obsidian_images/main/%7BEC50E1C6-1560-4DC4-8EA0-717E4166C7EB%7D.png\\",\\"https://raw.githubusercontent.com/MrSibe/obsidian_images/main/%7BF6798983-F2B1-4D38-9678-EC03BFE7C226%7D.png\\",\\"https://raw.githubusercontent.com/MrSibe/obsidian_images/main/20250711115906.png\\",\\"https://raw.githubusercontent.com/MrSibe/obsidian_images/main/%7B7E01DCEB-F2DC-4F70-A357-7C23373356D1%7D.png\\",\\"https://raw.githubusercontent.com/MrSibe/obsidian_images/main/%7B32D157E8-C015-4EBF-BB0C-EBFCD52D09CB%7D.png\\",\\"https://raw.githubusercontent.com/MrSibe/obsidian_images/main/%7BC33297EA-F22F-488C-976E-FFF26654B5D2%7D.png\\",\\"https://raw.githubusercontent.com/MrSibe/obsidian_images/main/%7B4E342780-38B0-488B-AD30-A212653ABCB4%7D.png\\",\\"https://raw.githubusercontent.com/MrSibe/obsidian_images/main/%7B0CAC141D-2DA9-45BE-9709-4B28692F34FE%7D.png\\"],\\"dateModified\\":\\"2025-09-14T03:18:42.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":6,"words":1799},"git":{"updatedTime":1757819922000,"contributors":[{"name":"xibei","username":"xibei","email":"15281741661@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/xibei?v=4","url":"https://github.com/xibei"}]},"autoDesc":true,"filePathRelative":"notes/CS-168/02-router.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"cd6809","sort":10001,"name":"CS-168"}]}');export{h as comp,g as data};
